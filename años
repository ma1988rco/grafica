<! DOCTYPE html>
< meta  charset = " utf-8 " >
< estilo >
cuerpo {
  fuente : 10 px  sans-serif ;
}
.y.axisRight  text {
    llenar : naranja ;
}
.y.axisLeft  text {
    relleno : acero azul ;
}
.  ruta del eje ,
.axis  line {
  llenar : ninguno ;
  accidente cerebrovascular : # 000 ;
  forma-representación : crispEdges ;
}
.bar1 {
  relleno : acero azul ;
}
.bar2 {
  llenar : red ;
}
.x.axis  path {
  pantalla : ninguna ;
}
< / style >
< cuerpo >
< script  src = " http://d3js.org/d3.v3.min.js " > </ script >
< script >
var margin = {top :  80 , right :  80 , bottom :  80 , left :  80 },
    ancho =  600  -  margen . la izquierda  -  el margen . derecho ,
    altura =  400  -  margen . arriba  -  margen . abajo ;
var x =  d3 . escala . ordinal ()
    . rangeRoundBands ([ 0 , ancho], .1 );
var y0 =  d3 . escala . lineal (). dominio ([ 300 , 1100 ]). rango ([altura, 0 ]),
y1 =  d3 . escala . lineal (). dominio ([ 20 , 80 ]). rango ([altura, 0 ]);
var xAxis =  d3 . svg . eje ()
    . escala (x)
    . orientar ( " abajo " );
// crear left yAxis
var yAxisLeft =  d3 . svg . eje (). escala (y0). garrapatas ( 4 ). orientar ( " izquierda " );
// crea el eje derecho
var yAxisRight =  d3 . svg . eje (). escala (y1). garrapatas ( 6 ). orientar ( " derecha " );
var svg =  d3 . select ( " cuerpo " ). append ( " svg " )
    . attr ( " ancho " , ancho +  margen . izquierda  +  margen . derecha )
    . attr ( " altura " , altura +  margen . arriba  +  margen . abajo )
  . añadir ( " g " )
    . attr ( " clase " , " gráfico " )
    . attr ( " transformar " , " traducir ( "  +  margen . izquierda  +  " "  +  margen . top  +  " ) " );
d3 . tsv ( " data.tsv " , tipo, función ( error , datos ) {
  x . dominio ( data . map ( function ( d ) { return  d . year ;}));
  y0 . dominio ([ 0 , d3 . max (datos, función ( d ) { devolución  d . dinero ;})]);
  
  svg . añadir ( " g " )
      . attr ( " clase " , " eje x " )
      . attr ( " transformación " , " traducir (0, "  + altura +  " ) " )
      . llamar (xAxis);
  svg . añadir ( " g " )
	  . attr ( " clase " , " eje y axis axis " )
	  . attr ( " transformar " , " traducir (0,0) " )
	  . llamar (yAxisLeft)
	. añadir ( " texto " )
	  . attr ( " y " , 6 )
	  . attr ( " dy " , " -2em " )
	  . estilo ( " texto-ancla " , " fin " )
	  . estilo ( " texto-ancla " , " fin " )
	  . texto ( " Dólares " );
	
  svg . añadir ( " g " )
	  . attr ( " clase " , " eje y axisRight " )
	  . attr ( " transformar " , " traducir ( "  + (ancho) +  " , 0) " )
	  . llamar (yAxisRight)
	. añadir ( " texto " )
	  . attr ( " y " , 6 )
	  . attr ( " dy " , " -2em " )
	  . attr ( " dx " , " 2em " )
	  . estilo ( " texto-ancla " , " fin " )
	  . texto ( " # " );
  bares =  svg . selectAll ( " .bar " ). datos (datos). enter ();
  bares . añadir ( " rect " )
      . attr ( " clase " , " bar1 " )
      . attr ( " x " , la función ( d ) { retorno  x ( d . año );})
      . attr ( " ancho " , x . rangeBand () / 2 )
      . attr ( " y " , función ( d ) { return  y0 ( d . dinero );})
	  . attr ( " altura " , función ( d , i , j ) { altura de retorno -  y0 ( d . dinero );});
  bares . añadir ( " rect " )
      . attr ( " clase " , " bar2 " )
      . attr ( " x " , función ( d ) { retorno  x ( d . año ) +  x . rangeBand () / 2 ;})
      . attr ( " ancho " , x . rangeBand () /  2 )
      . attr ( " Y " , la función ( d ) { retorno  y1 ( d . número );})
	  . attr ( " altura " , la función ( d , i , j ) { retorno altura -  y1 ( d . número );});
});
 tipo de función ( d ) {
  d . dinero  =  + d . dinero ;
  return d;
}
< / script >
